<Window x:Class="Salamandra.Views.EventListWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:local="clr-namespace:Salamandra.Views"
        xmlns:enums="clr-namespace:Salamandra.Engine.Domain.Enums;assembly=Salamandra.Engine"
        xmlns:converters="clr-namespace:Salamandra.Converters"
        xmlns:strings="clr-namespace:Salamandra.Strings"
        mc:Ignorable="d"
        Title="{x:Static strings:ViewsTexts.EventListWindow_WindowTitle}" Height="480" Width="800"
        WindowStartupLocation="CenterOwner" ShowInTaskbar="False"
        Loaded="Window_Loaded" WindowState="Maximized">
    <Window.Resources>
        <converters:DayOfWeekStringConverter x:Key="DayOfWeekStringConverter"/>
        <converters:StartingTimeToStringComparer x:Key="StartingTimeToStringComparer"/>
        <converters:PastDateTimeToBooleanConverter x:Key="PastDateTimeToBooleanConverter"/>
    </Window.Resources>
    <Grid Margin="8">
        <Grid.RowDefinitions>
            <RowDefinition Height="*"/>
            <RowDefinition Height="Auto"/>
        </Grid.RowDefinitions>

        <ListView Grid.Row="0" ItemsSource="{Binding Events}" SelectedItem="{Binding SelectedScheduledEvent}"
                  Style="{StaticResource ListViewStyle}"
                  VerticalContentAlignment="Center" Name="EventsListView" SnapsToDevicePixels="True">
            <ListView.View>
                <GridView>
                    <GridViewColumn Width="80">
                        <GridViewColumn.Header>
                            <GridViewColumnHeader Content="{x:Static strings:ViewsTexts.EventListWindow_Time}"
                                                  Tag="StartingDateTime" Click="GridViewColumnHeader_Click"/>
                        </GridViewColumn.Header>

                        <GridViewColumn.CellTemplate>
                            <DataTemplate>
                                <StackPanel Orientation="Horizontal">
                                    <CheckBox IsChecked="{Binding IsEnabled}"/>

                                    <TextBlock Margin="8 0 0 0">
                                        <TextBlock.Text>
                                            <MultiBinding Converter="{StaticResource StartingTimeToStringComparer}">
                                                <Binding Path="StartingDateTime"/>
                                                <Binding Path="UsePlayingHours"/>
                                            </MultiBinding>
                                        </TextBlock.Text>
                                    </TextBlock>
                                </StackPanel>
                            </DataTemplate>
                        </GridViewColumn.CellTemplate>
                    </GridViewColumn>

                    <GridViewColumn Width="100">
                        <GridViewColumn.Header>
                            <GridViewColumnHeader Content="{x:Static strings:ViewsTexts.EventListWindow_Mode}" 
                                                  Tag="Immediate" Click="GridViewColumnHeader_Click"/>
                        </GridViewColumn.Header>

                        <GridViewColumn.CellTemplate>
                            <DataTemplate>
                                <TextBlock>
                                    <TextBlock.Style>
                                        <Style TargetType="{x:Type TextBlock}">
                                            <Style.Triggers>
                                                <DataTrigger Binding="{Binding Immediate}" Value="False">
                                                    <Setter Property="Text" Value="{x:Static strings:ViewsTexts.Misc_Events_NotImmediate}"/>
                                                </DataTrigger>

                                                <DataTrigger Binding="{Binding Immediate}" Value="True">
                                                    <Setter Property="Text" Value="{x:Static strings:ViewsTexts.Misc_Events_Immediate}"/>
                                                </DataTrigger>
                                            </Style.Triggers>
                                        </Style>
                                    </TextBlock.Style>
                                </TextBlock>
                            </DataTemplate>
                        </GridViewColumn.CellTemplate>
                    </GridViewColumn>

                    <GridViewColumn Width="200">
                        <GridViewColumn.Header>
                            <GridViewColumnHeader Content="{x:Static strings:ViewsTexts.EventListWindow_File}"
                                Tag="FriendlyName" Click="GridViewColumnHeader_Click"/>
                        </GridViewColumn.Header>

                        <GridViewColumn.CellTemplate>
                            <DataTemplate>
                                <StackPanel Orientation="Horizontal">
                                    <Border Width="16" Height="24" VerticalAlignment="Center">
                                        <Image Width="16" Height="16" RenderOptions.BitmapScalingMode="NearestNeighbor">
                                            <Image.Style>
                                                <Style TargetType="{x:Type Image}">
                                                    <Style.Triggers>
                                                        <DataTrigger Binding="{Binding TrackScheduleType}" Value="{x:Static enums:TrackScheduleType.AudioFileTrack}">
                                                            <Setter Property="Source" Value="/Images/Icons/Playlist/audio_file.png"/>
                                                        </DataTrigger>

                                                        <DataTrigger Binding="{Binding TrackScheduleType}" Value="{x:Static enums:TrackScheduleType.TimeAnnouncementTrack}">
                                                            <Setter Property="Source" Value="/Images/Icons/Playlist/alarm_clock.png"/>
                                                        </DataTrigger>

                                                        <DataTrigger Binding="{Binding TrackScheduleType}" Value="{x:Static enums:TrackScheduleType.RandomFileTrack}">
                                                            <Setter Property="Source" Value="/Images/Icons/Playlist/music_folder.png"/>
                                                        </DataTrigger>

                                                        <DataTrigger Binding="{Binding TrackScheduleType}" Value="{x:Static enums:TrackScheduleType.StartPlaylistTrack}">
                                                            <Setter Property="Source" Value="/Images/Icons/Playlist/remote_control.png"/>
                                                        </DataTrigger>

                                                        <DataTrigger Binding="{Binding TrackScheduleType}" Value="{x:Static enums:TrackScheduleType.StopPlaylistTrack}">
                                                            <Setter Property="Source" Value="/Images/Icons/Playlist/remote_control.png"/>
                                                        </DataTrigger>

                                                        <DataTrigger Binding="{Binding TrackScheduleType}" Value="{x:Static enums:TrackScheduleType.OpenPlaylistTrack}">
                                                            <Setter Property="Source" Value="/Images/Icons/Playlist/playlist_file.png"/>
                                                        </DataTrigger>

                                                        <DataTrigger Binding="{Binding TrackScheduleType}" Value="{x:Static enums:TrackScheduleType.SystemProcessTrack}">
                                                            <Setter Property="Source" Value="/Images/Icons/Playlist/application_terminal.png"/>
                                                        </DataTrigger>

                                                        <DataTrigger Binding="{Binding TrackScheduleType}" Value="{x:Static enums:TrackScheduleType.OpenScheduleTrack}">
                                                            <Setter Property="Source" Value="/Images/Icons/Playlist/calendar.png"/>
                                                        </DataTrigger>
                                                    </Style.Triggers>
                                                </Style>
                                            </Image.Style>
                                        </Image>
                                    </Border>

                                    <TextBlock Text="{Binding FriendlyName}" Margin="8 0 0 0" VerticalAlignment="Center"/>
                                </StackPanel>
                            </DataTemplate>
                        </GridViewColumn.CellTemplate>
                    </GridViewColumn>

                    <GridViewColumn Header="{x:Static strings:ViewsTexts.EventListWindow_WeekDays}" Width="120">
                        <GridViewColumn.CellTemplate>
                            <DataTemplate>
                                <Expander x:Name="DaysOfWeekListbox">
                                    <ListBox ItemsSource="{Binding DaysOfWeek}">
                                        <ListBox.ItemsPanel>
                                            <ItemsPanelTemplate>
                                                <VirtualizingStackPanel IsItemsHost="True" Orientation="Horizontal"/>
                                            </ItemsPanelTemplate>
                                        </ListBox.ItemsPanel>

                                        <ListBox.ItemTemplate>
                                            <DataTemplate>
                                                <TextBlock Text="{Binding ., Converter={StaticResource DayOfWeekStringConverter}}"/>
                                            </DataTemplate>
                                        </ListBox.ItemTemplate>
                                    </ListBox>
                                </Expander>

                                <DataTemplate.Triggers>
                                    <DataTrigger Binding="{Binding UseDaysOfWeek}" Value="False">
                                        <Setter Property="Visibility" Value="Hidden" TargetName="DaysOfWeekListbox"/>
                                    </DataTrigger>
                                </DataTemplate.Triggers>
                            </DataTemplate>
                        </GridViewColumn.CellTemplate>
                    </GridViewColumn>

                    <GridViewColumn Header="{x:Static strings:ViewsTexts.EventListWindow_Hours}" Width="120">
                        <GridViewColumn.CellTemplate>
                            <DataTemplate>
                                <Expander x:Name="HoursListbox">
                                    <ListBox ItemsSource="{Binding PlayingHours}">
                                        <ListBox.ItemsPanel>
                                            <ItemsPanelTemplate>
                                                <VirtualizingStackPanel IsItemsHost="True" Orientation="Horizontal"/>
                                            </ItemsPanelTemplate>
                                        </ListBox.ItemsPanel>

                                        <ListBox.ItemTemplate>
                                            <DataTemplate>
                                                <TextBlock Text="{Binding ., StringFormat='00'}"/>
                                            </DataTemplate>
                                        </ListBox.ItemTemplate>
                                    </ListBox>
                                </Expander>

                                <DataTemplate.Triggers>
                                    <DataTrigger Binding="{Binding UsePlayingHours}" Value="False">
                                        <Setter Property="Visibility" Value="Hidden" TargetName="HoursListbox"/>
                                    </DataTrigger>
                                </DataTemplate.Triggers>
                            </DataTemplate>
                        </GridViewColumn.CellTemplate>
                    </GridViewColumn>

                    <GridViewColumn Header="{x:Static strings:ViewsTexts.EventListWindow_Expiration}" Width="120">
                        <GridViewColumn.CellTemplate>
                            <DataTemplate>
                                <TextBlock Text="{Binding ExpirationDateTime, StringFormat='dd/MM/yyyy HH:mm:ss'}"
                                           x:Name="ExpirationTextBlock"/>

                                <DataTemplate.Triggers>
                                    <DataTrigger Binding="{Binding UseExpirationDateTime}" Value="False">
                                        <Setter Property="Visibility" Value="Hidden" TargetName="ExpirationTextBlock"/>
                                    </DataTrigger>
                                </DataTemplate.Triggers>
                            </DataTemplate>
                        </GridViewColumn.CellTemplate>
                    </GridViewColumn>
                </GridView>
            </ListView.View>

            <ListView.ContextMenu>
                <ContextMenu>
                    <MenuItem Header="{x:Static strings:ViewsTexts.Misc_Copy}" InputGestureText="Ctrl+C"
                              Command="{Binding CopyEventsCommand}"
                              CommandParameter="{Binding RelativeSource={RelativeSource AncestorType={x:Type ContextMenu}}, Path=PlacementTarget.SelectedItems}">
                        <MenuItem.Icon>
                            <Image Source="/Images/Icons/Toolbar/copy.png" />
                        </MenuItem.Icon>
                    </MenuItem>

                    <MenuItem Header="{x:Static strings:ViewsTexts.Misc_Paste}" InputGestureText="Ctrl+V"
                              Command="{Binding PasteEventsCommand}">
                        <MenuItem.Icon>
                            <Image Source="/Images/Icons/Toolbar/paste.png" />
                        </MenuItem.Icon>
                    </MenuItem>

                    <Separator/>

                    <MenuItem Header="{x:Static strings:ViewsTexts.EventListWindow_Delete}" InputGestureText="Del"
                              Command="{Binding DeleteEventsCommand}"
                              CommandParameter="{Binding RelativeSource={RelativeSource AncestorType={x:Type ContextMenu}}, Path=PlacementTarget.SelectedItems}"/>

                    <MenuItem Header="{x:Static strings:ViewsTexts.EventListWindow_DeleteAll}" InputGestureText="Ctrl+Del"
                              Command="{Binding DeleteAllEventsCommand}"/>
                </ContextMenu>
            </ListView.ContextMenu>

            <ListView.InputBindings>
                <KeyBinding Modifiers="Ctrl" Key="C" Command="{Binding CopyEventsCommand}"
                            CommandParameter="{Binding SelectedItems, ElementName=EventsListView}"/>

                <KeyBinding Modifiers="Ctrl" Key="V" Command="{Binding PasteEventsCommand}"/>

                <KeyBinding Key="Delete" Command="{Binding DeleteEventsCommand}"
                            CommandParameter="{Binding SelectedItems, ElementName=EventsListView}"/>

                <KeyBinding Modifiers="Ctrl" Key="Delete" 
                            Command="{Binding DeleteAllEventsCommand}"/>
            </ListView.InputBindings>

            <ListView.ItemContainerStyle>
                <Style TargetType="{x:Type ListViewItem}" BasedOn="{StaticResource ListViewItemStyle}">
                    <Setter Property="HorizontalContentAlignment" Value="Stretch"/>


                    <Style.Triggers>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding UseExpirationDateTime}" Value="True"/>
                                <Condition Binding="{Binding ExpirationDateTime, Converter={StaticResource PastDateTimeToBooleanConverter}}" Value="True"/>
                            </MultiDataTrigger.Conditions>

                            <MultiDataTrigger.Setters>
                                <Setter Property="FontStyle" Value="Italic"/>
                                <Setter Property="Foreground" Value="DarkGray"/>
                            </MultiDataTrigger.Setters>
                        </MultiDataTrigger>
                    </Style.Triggers>
                </Style>
            </ListView.ItemContainerStyle>
        </ListView>

        <Grid Grid.Row="1">
            <Grid.RowDefinitions>
                <RowDefinition Height="Auto"/>
                <RowDefinition Height="Auto"/>
                <RowDefinition Height="Auto"/>
            </Grid.RowDefinitions>

            <StackPanel Grid.Row="0" Orientation="Horizontal" Margin="0 8 0 0" HorizontalAlignment="Right">
                <Button Content="{x:Static strings:ViewsTexts.EventListWindow_New}" Command="{Binding CreateEventCommand}"
                    Width="80" Height="24"/>
                <Button Content="{x:Static strings:ViewsTexts.EventListWindow_Edit}" Command="{Binding EditEventCommand}"
                    Width="80" Height="24" Margin="8 0 0 0"/>
                <Button Content="{x:Static strings:ViewsTexts.EventListWindow_Delete}" Command="{Binding DeleteEventsCommand}"
                        CommandParameter="{Binding SelectedItems, ElementName=EventsListView}"
                        Width="80" Height="24" Margin="8 0 0 0"/>

                <Separator Style="{StaticResource {x:Static ToolBar.SeparatorStyleKey}}" 
                           Margin="8 0 0 0" />

                <Button Content="{x:Static strings:ViewsTexts.EventListWindow_DeleteExpired}" Command="{Binding DeleteExpiredEventsCommand}"
                        CommandParameter="{Binding SelectedItems, ElementName=EventsListView}"
                        Width="120" Height="24" Margin="8 0 0 0"/>

                <Separator Style="{StaticResource {x:Static ToolBar.SeparatorStyleKey}}" 
                           Margin="8 0 0 0" />

                <Button Content="{x:Static strings:ViewsTexts.EventListWindow_Open}" Command="{Binding OpenEventListCommand}"
                    Width="80" Height="24" Margin="8 0 0 0"/>
                <Button Content="{x:Static strings:ViewsTexts.EventListWindow_Save}" Command="{Binding SaveEventListAsCommand}"
                    Width="80" Height="24" Margin="8 0 0 0"/>

            </StackPanel>

            <Separator Grid.Row="1" Margin="0 8 0 0"/>

            <StackPanel Grid.Row="2" Orientation="Horizontal" Margin="0 8 0 0" HorizontalAlignment="Right">
                <Button Content="{x:Static strings:ViewsTexts.Misc_Ok}" IsDefault="True" Name="ConfirmButton" Click="ConfirmButton_Click"
                    Width="80" Height="24"/>
                <Button Content="{x:Static strings:ViewsTexts.Misc_Cancel}" 
                    Width="80" Height="24" Margin="8 0 0 0" IsCancel="True"/>
            </StackPanel>
        </Grid>
    </Grid>
</Window>
