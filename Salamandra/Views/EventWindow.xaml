<Window x:Class="Salamandra.Views.EventWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:i="http://schemas.microsoft.com/xaml/behaviors"
        xmlns:local="clr-namespace:Salamandra.Views"
        xmlns:enums="clr-namespace:Salamandra.Engine.Domain.Enums;assembly=Salamandra.Engine"
        xmlns:converters="clr-namespace:Salamandra.Converters"
        xmlns:strings="clr-namespace:Salamandra.Strings"
        xmlns:xctk="http://schemas.xceed.com/wpf/xaml/toolkit" 
        mc:Ignorable="d"
        Title="{x:Static strings:ViewsTexts.EventWindow_WindowTitle}" Width="480" SizeToContent="Height"
        ResizeMode="NoResize" ShowInTaskbar="False" WindowStartupLocation="CenterOwner"
        Loaded="Window_Loaded">
    <Window.Resources>
        <converters:DayOfWeekStringConverter x:Key="DayOfWeekStringConverter"/>
        <converters:InverseBooleanConverter x:Key="InverseBooleanConverter"/>
        <converters:EnumToBool x:Key="EnumToBool"/>
    </Window.Resources>
    <Grid Margin="8">
        <Grid.RowDefinitions>
            <RowDefinition Height="*"/>
            <RowDefinition Height="Auto"/>
        </Grid.RowDefinitions>

        <StackPanel Grid.Row="0">
            <GroupBox Header="{x:Static strings:ViewsTexts.EventWindow_DateAndTime}">
                <StackPanel Margin="4">
                    <TextBlock Text="{x:Static strings:ViewsTexts.EventWindow_StartingDateTime}"/>

                    <Grid Margin="0 4 0 0">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="Auto"/>
                            <ColumnDefinition Width="Auto"/>
                            <ColumnDefinition Width="*"/>
                        </Grid.ColumnDefinitions>

                        <xctk:DateTimePicker Value="{Binding ScheduledEvent.StartingDateTime}"
                                             Format="Custom" FormatString="dd/MM/yyyy"
                                             Grid.Column="0" MinWidth="150"
                                             ToolTip="{x:Static strings:ViewsTexts.EventWindow_Tooltip_StartingDate}"/>

                        <xctk:TimePicker Value="{Binding ScheduledEvent.StartingDateTime}" 
                                         Format="Custom" TimeInterval="00:15:00"
                                         Grid.Column="1" Margin="8 0 0 0" MinWidth="150"
                                         ToolTip="{x:Static strings:ViewsTexts.EventWindow_Tooltip_StartingTime}">
                            <xctk:TimePicker.Style>
                                <Style TargetType="{x:Type xctk:TimePicker}">
                                    <Setter Property="FormatString" Value="HH:mm:ss"/>

                                    <Style.Triggers>
                                        <DataTrigger Binding="{Binding ScheduledEvent.UsePlayingHours}" Value="True">
                                            <Setter Property="FormatString" Value="__:mm:ss"/>
                                        </DataTrigger>
                                    </Style.Triggers>
                                </Style>
                            </xctk:TimePicker.Style>
                        </xctk:TimePicker>

                        <CheckBox Grid.Column="2" Content="{x:Static strings:ViewsTexts.EventWindow_Immediate}" IsChecked="{Binding ScheduledEvent.Immediate}"
                              Margin="8 0 0 0" VerticalAlignment="Center"
                                  ToolTip="{x:Static strings:ViewsTexts.EventWindow_Tooltip_Immediate}">
                            <i:Interaction.Triggers>
                                <i:EventTrigger EventName="Checked">
                                    <i:InvokeCommandAction Command="{Binding ImmediateChangedCommand}"/>
                                </i:EventTrigger>

                                <i:EventTrigger EventName="Unchecked">
                                    <i:InvokeCommandAction Command="{Binding ImmediateChangedCommand}"/>
                                </i:EventTrigger>
                            </i:Interaction.Triggers>
                        </CheckBox>
                    </Grid>

                    <CheckBox IsChecked="{Binding ScheduledEvent.UseExpirationDateTime}"
                              Content="{x:Static strings:ViewsTexts.EventWindow_ExpirationDateTime}" Margin="0 8 0 0"
                              ToolTip="{x:Static strings:ViewsTexts.EventWindow_Tooltip_UseExpirationDate}"/>

                    <Grid Margin="0 4 0 0" IsEnabled="{Binding ScheduledEvent.UseExpirationDateTime}">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="Auto"/>
                            <ColumnDefinition Width="Auto"/>
                        </Grid.ColumnDefinitions>

                        <xctk:DateTimePicker Value="{Binding ScheduledEvent.ExpirationDateTime}" 
                                         Format="Custom" FormatString="dd/MM/yyyy" 
                                         Grid.Column="0" MinWidth="150"
                                             ToolTip="{x:Static strings:ViewsTexts.EventWindow_Tooltip_ExpirationDate}"/>

                        <xctk:TimePicker Value="{Binding ScheduledEvent.ExpirationDateTime}" 
                                     Format="Custom" FormatString="HH:mm:ss" TimeInterval="00:15:00"
                                     Grid.Column="1" Margin="8 0 0 0" MinWidth="150"
                                         ToolTip="{x:Static strings:ViewsTexts.EventWindow_Tooltip_ExpirationTime}"/>
                    </Grid>
                </StackPanel>
            </GroupBox>

            <GroupBox Header="{x:Static strings:ViewsTexts.EventWindow_TimeAndDay}" Margin="0 8 0 0">
                <StackPanel Margin="4">
                    <CheckBox IsChecked="{Binding ScheduledEvent.UsePlayingHours}" Content="{x:Static strings:ViewsTexts.EventWindow_OtherHours}"
                              ToolTip="{x:Static strings:ViewsTexts.EventWindow_Tooltip_UsePlayingHours}"/>

                    <xctk:CheckListBox ItemsSource="{Binding Hours}" SelectedItemsOverride="{Binding ScheduledEvent.PlayingHours}"
                                   IsEnabled="{Binding ScheduledEvent.UsePlayingHours}" Margin="0 4 0 0"
                                   IsSelectAllActive="True" SelectAllContent="{x:Static strings:ViewsTexts.Misc_SelectAll}">
                        <ItemsControl.ItemsPanel>
                            <ItemsPanelTemplate>
                                <UniformGrid Columns="4" />
                            </ItemsPanelTemplate>
                        </ItemsControl.ItemsPanel>

                        <xctk:CheckListBox.ItemTemplate>
                            <DataTemplate>
                                <TextBlock Text="{Binding ., StringFormat='00.##'}"/>
                            </DataTemplate>
                        </xctk:CheckListBox.ItemTemplate>
                    </xctk:CheckListBox>

                    <CheckBox IsChecked="{Binding ScheduledEvent.UseDaysOfWeek}" Content="{x:Static strings:ViewsTexts.EventListWindow_WeekDays}" Margin="0 8 0 0"
                              ToolTip="{x:Static strings:ViewsTexts.EventWindow_Tooltip_UseDaysOfWeek}"/>

                    <xctk:CheckListBox ItemsSource="{Binding Days}" SelectedItemsOverride="{Binding ScheduledEvent.DaysOfWeek}"
                                   IsEnabled="{Binding ScheduledEvent.UseDaysOfWeek}" Margin="0 4 0 0"
                                   IsSelectAllActive="True" SelectAllContent="{x:Static strings:ViewsTexts.Misc_SelectAll}">
                        <ItemsControl.ItemsPanel>
                            <ItemsPanelTemplate>
                                <UniformGrid Columns="7" />
                            </ItemsPanelTemplate>
                        </ItemsControl.ItemsPanel>

                        <xctk:CheckListBox.ItemTemplate>
                            <DataTemplate>
                                <TextBlock Text="{Binding ., Converter={StaticResource DayOfWeekStringConverter}}"/>
                            </DataTemplate>
                        </xctk:CheckListBox.ItemTemplate>
                    </xctk:CheckListBox>
                </StackPanel>
            </GroupBox>

            <GroupBox Header="{x:Static strings:ViewsTexts.EventWindow_EventType}" Margin="0 8 0 0">
                <StackPanel Margin="4">
                    <ComboBox SelectedItem="{Binding ScheduledEvent.TrackScheduleType}"
                              ItemsSource="{Binding Source={converters:EnumBindingSource EnumType={x:Type enums:TrackScheduleType}}}"
                              ToolTip="{x:Static strings:ViewsTexts.EventWindow_Tooltip_TrackType}">
                        <i:Interaction.Triggers>
                            <i:EventTrigger EventName="SelectionChanged">
                                <i:InvokeCommandAction Command="{Binding ComboTrackTypeChangedCommand}"/>
                            </i:EventTrigger>
                        </i:Interaction.Triggers>
                    </ComboBox>

                    <Grid Margin="0 8 0 0" IsEnabled="{Binding EventRequiresPath}">
                        <Grid.ColumnDefinitions >
                            <ColumnDefinition Width="*"/>
                            <ColumnDefinition Width="Auto"/>
                        </Grid.ColumnDefinitions>

                        <TextBox Text="{Binding ScheduledEvent.Filename}"
                                 Grid.Column="0" Height="24"
                                 ToolTip="{x:Static strings:ViewsTexts.EventWindow_Tooltip_Filename}"/>

                        <Button Command="{Binding OpenPathDialogCommand}" Content="..."
                                Grid.Column="1" Width="30" Height="24" Margin="4 0 0 0"/>
                    </Grid>
                </StackPanel>
            </GroupBox>

            <GroupBox Header="{x:Static strings:ViewsTexts.EventWindow_OrderAndPriority}" Margin="0 8 0 0">
                <StackPanel Margin="4">
                    <TextBlock Text="{x:Static strings:ViewsTexts.EventWindow_QueueOrder}"/>

                    <Grid>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="Auto"/>
                            <ColumnDefinition Width="Auto"/>
                            <ColumnDefinition Width="Auto"/>
                        </Grid.ColumnDefinitions>

                        <xctk:IntegerUpDown Value="{Binding ScheduledEvent.QueueOrder}"
                                        Increment="1" Minimum="0" Maximum="99"
                                        Margin="0 4 0 0" MinWidth="148"
                                            ToolTip="{x:Static strings:ViewsTexts.EventWindow_Tooltip_QueueOrder}"/>

                        <RadioButton Content="{x:Static strings:ViewsTexts.EventWindow_HighPriority}" Grid.Column="1" 
                                     VerticalAlignment="Center" Margin="8 0 0 0"
                                     IsChecked="{Binding ScheduledEvent.EventPriority, Converter={StaticResource EnumToBool}, ConverterParameter={x:Static enums:EventPriority.High}}"
                                     ToolTip="{x:Static strings:ViewsTexts.EventWindow_Tooltip_Priority}"/>

                        <RadioButton Content="{x:Static strings:ViewsTexts.EventWindow_LowPriority}" Grid.Column="2" 
                                     VerticalAlignment="Center" Margin="8 0 0 0"
                                     IsChecked="{Binding ScheduledEvent.EventPriority, Converter={StaticResource EnumToBool}, ConverterParameter={x:Static enums:EventPriority.Low}}"
                                     ToolTip="{x:Static strings:ViewsTexts.EventWindow_Tooltip_Priority}"/>
                    </Grid>
                </StackPanel>
            </GroupBox>

            <GroupBox Header="{x:Static strings:ViewsTexts.EventWindow_MaximumWait}" Margin="0 8 0 0">
                <StackPanel Margin="4" IsEnabled="{Binding ScheduledEvent.Immediate, Converter={StaticResource InverseBooleanConverter}}">
                    <CheckBox IsChecked="{Binding ScheduledEvent.UseMaximumWait}" Content="{x:Static strings:ViewsTexts.EventWindow_EnableMaximumWait}"
                              ToolTip="{x:Static strings:ViewsTexts.EventWindow_Tooltip_UseMaximumWait}"/>

                    <Grid Margin="0 8 0 0">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="*"/>
                            <ColumnDefinition Width="*"/>
                        </Grid.ColumnDefinitions>

                        <StackPanel Grid.Column="0" IsEnabled="{Binding ScheduledEvent.UseMaximumWait}">
                            <TextBlock Text="{x:Static strings:ViewsTexts.EventWindow_MaximumWaitTime}"/>
                            <xctk:TimeSpanUpDown Value="{Binding ScheduledEvent.MaximumWaitTime}"
                                                 Minimum="00:00:00" Maximum="00:59:59" Margin="0 4 0 0"
                                                 ToolTip="{x:Static strings:ViewsTexts.EventWindow_Tooltip_MaximumWaitTime}"/>
                        </StackPanel>

                        <StackPanel Grid.Column="1" IsEnabled="{Binding ScheduledEvent.UseMaximumWait}"
                                    Margin="8 0 0 0">
                            <TextBlock Text="{x:Static strings:ViewsTexts.EventWindow_MaximumWaitAction}"/>

                            <ComboBox SelectedItem="{Binding ScheduledEvent.MaximumWaitAction}" Margin="0 4 0 0"
                                      ItemsSource="{Binding Source={converters:EnumBindingSource EnumType={x:Type enums:MaximumWaitAction}}}"
                                      ToolTip="{x:Static strings:ViewsTexts.EventWindow_Tooltip_MaximumWaitAction}"/>
                        </StackPanel>
                    </Grid>
                </StackPanel>
            </GroupBox>
        </StackPanel>

        <Grid Grid.Row="1" Margin="0 8 0 0">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="Auto"/>
                <ColumnDefinition Width="*"/>
            </Grid.ColumnDefinitions>

            <Button Content="{x:Static strings:ViewsTexts.EventWindow_Cue}" Command="{Binding OpenPreListenCommand}"
                    Width="80" Height="24"/>

            <StackPanel Grid.Column="1" Orientation="Horizontal" HorizontalAlignment="Right">
                <Button Content="{x:Static strings:ViewsTexts.Misc_Ok}" IsDefault="True" Name="ConfirmButton" Command="{Binding ValidateAndCloseCommand}"
                    Width="80" Height="24"/>
                <Button Content="{x:Static strings:ViewsTexts.Misc_Cancel}" 
                    Width="80" Height="24" Margin="8 0 0 0" IsCancel="True"/>
            </StackPanel>
        </Grid>
    </Grid>
</Window>
